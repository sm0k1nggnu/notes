{"version":3,"sources":["Note/Note.js","AddNote/AddNote.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["note","props","classes","push","active","react_default","a","createElement","className","join","onClick","click","key","title","date","content","length","concat","substring","AddNote","state","notes","_this2","this","type","onChange","event","setState","target","value","placeholder","onAddNote","Component","connect","storedNotes","dispatch","App","showNote","lastNoteId","selectNoteHandler","index","id","_this","map","cn","Note_Note","onSelectNote","noteId","findIndex","onDeleteNote","src_AddNote_AddNote","changed","addNewNote","save","saveNewNote","clicked","Boolean","window","location","hostname","match","initialState","reducer","arguments","undefined","action","console","table","log","newId","Date","now","Object","objectSpread","notesArray","filter","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3e34cff.chunk.js","sourcesContent":["import React from 'react';\nimport './Note.css';\n\nconst note = (props) => {\n    let classes = [];\n    classes.push('Note');\n    props.active ? classes.push(props.active) : classes.push('')\n    return (\n        <div\n            className={classes.join(' ')}\n            onClick={ props.click }\n            key={ props.key }\n        >\n            <h2>{ props.title}<small>{ props.date }</small></h2>\n            <p>{ props.content.length >= 20 ? `${props.content.substring(0,20)}...` : props.content }</p>\n        </div>\n    )\n}\n\nexport default note;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './AddNote.css';\n\n// const addnote = (props) => {\nclass AddNote extends Component {\n    state = {\n        notes : [\n            {title: '',content: ''}\n        ]\n    }\n     render() {\n        return (\n            <div className=\"AddNote\">\n                <input\n                    type=\"text\"\n                    onChange={(event) => this.setState({title: event.target.value})}\n                    value={ this.state.notes.title }\n                    placeholder=\"My New Note\"\n                    className=\"AddNote__Title\"\n                />\n                <textarea\n                    value={this.state.notes.content}\n                    placeholder=\"Lorem Ipsum Foo Bar\"\n                    onChange={(event) => this.setState({content: event.target.value})}\n                    className=\"AddNote__Content\"\n                >\n                </textarea>\n                <button\n                    // onClick={(event) => this.postDataHandler(event)}\n                    onClick={(event) => this.props.onAddNote({title: this.state.title, content: this.state.content})}\n                    className=\"AddNote__Save\"\n                >save</button>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        storedNotes: state.notes\n    };\n  }\n\n  const mapDispatchToProps = dispatch => {\n    return {\n        onAddNote: (event) => dispatch({type: 'ADD_NOTE', title: event.title, content: event.content}),\n    };\n  }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNote);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Note from './Note/Note';\nimport AddNote from './AddNote/AddNote';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    showNote: 0,\n    lastNoteId: 2\n  }\n\n  selectNoteHandler = (index) => {\n    let id = this.props.storedNotes[index].id\n    this.setState({showNote: id});\n  }\n\n  render() {\n    let notes = null;\n    if(this.props.storedNotes) {\n      notes =  (\n        <div>\n          {this.props.storedNotes.map((note, index) => {\n            let cn = (this.props.showNote === note.id) ? 'active' : '';\n            return <Note\n              key={ index }\n              active={ cn }\n              title={ note.title }\n              content={ note.content }\n              //date={ note.id }\n              click={() => this.props.onSelectNote({id: note.id})}\n              />\n          })}\n      </div>\n      )\n    } else {\n      notes = (\n        <p>No Notes</p>\n      )\n    }\n    //single note\n    let note = null;\n    let noteId = null;\n    if(this.props.storedNotes.length > 0) {\n      noteId = this.props.storedNotes.length-1;//this.props.storedNotes.findIndex(note => note.id === this.props.showNote);\n\n    if(this.props.showNote !== null) {\n        noteId = this.props.storedNotes.findIndex(note => note.id === this.props.showNote)\n      }\n      //console.log(\"note id index\" + noteId + \"shownote \" +  this.props.showNote)\n      note = (\n        <div className=\"Note\" key={ noteId }>{ noteId }\n          <h2>{ this.props.storedNotes[noteId].title }</h2>\n          <button\n            onClick={() => this.props.onDeleteNote({id: this.props.showNote})}>delete\n          </button>\n          <p>{ this.props.storedNotes[noteId].content }</p>\n        </div>\n        )\n      } else {\n        note = (<p></p>)\n      }\n\n    return (\n      <div className=\"App\">\n        <div className=\"NotesList\">\n          <AddNote\n            changed={(event) => this.addNewNote(event)}\n            save={(event) => this.saveNewNote(event)}\n            clicked={this.props.onAddNote}\n          />\n         { notes }\n        </div>\n         { note }\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n      storedNotes: state.notes,\n      showNote: state.showNote,\n      lastNoteId: state.lastNoteId\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      onDeleteNote: (event) => dispatch({type: 'DELETE_NOTE', noteId: event.id}),\n      onSelectNote: (event) => dispatch({type: 'SELECT_NOTE', noteId: event.id})\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    notes : [\n        {id: 0, title: 'A note', content: 'Lorem Ipsumasd asd sadas dasdasdas adasdas'},\n    ],\n    showNote: 0,\n    lastNoteId: 0\n}\n\nconst reducer = (state = initialState, action) => {\n    console.table(state)\n    switch (action.type) {\n        case 'ADD_NOTE':\n            //console.table(action)\n            console.log(state.lastNoteId)\n            const newId = Date.now()//state.lastNoteId  ? state.lastNoteId + 1 : 1;\n            console.log(newId)\n            return {\n                ...state,\n                showNote: newId,\n                lastNoteId: newId,\n                notes: state.notes.concat({\n                    id: newId,\n                    title: action.title,\n                    content: action.content\n                })\n            }\n        case 'DELETE_NOTE':\n            const noteId = action.noteId;\n            let notesArray = state.notes.filter(note => note.id !== noteId)\n            return {\n                ...state,\n                showNote: null,\n                notes: notesArray\n            }\n        case 'SELECT_NOTE':\n            //console.table(\"select note \" +  action.noteId)\n            const id = action.noteId;\n            return {\n                ...state,\n                showNote: id\n            }\n        default:\n            return {\n                ...state\n            }\n    }\n    return state;\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducer'\n\nconst store = createStore(reducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}